#=
 В Julia поддерживается работа с безопасными ссылками, гарантирующими как корректность данных, на которые они указывают, так и автоматические выделение и очистку памяти. Причём указатели допускаются не только на пользовательские объекты и данные сложных типов, но и на значения базовых типов.

Функция Ref() возвращает внутреннюю ссылку на объект-параметр. Если в качестве аргумента задаётся значение базового типа (например, целое число), Julia автоматически выполнит его размещение в памяти, и Ref() вернёт корректную ссылку на соответствующую "ячейку".

Например, Ref(1) разместит в памяти значение 1 целого типа, и вернёт ссылку (указатель) на это значение:

pnt1 = Ref(1)

В дальнейшем можно как считывать значение, доступное по ссылке, так и менять его. Для этого используются скобки [] , указываемые непосредственно за именем переменной-указателя.

pnt1 = Ref(1)
println(pnt1[]) # 1

pnt1[] = pnt1[] + 11 
println(pnt1[]) # 12
=#

a = Ref(3)
b = Ref(10)

f(x) = a[] * x + b[]

function update!(a, b)
   a[] -= 1
   b[] -= 2
end

print(f(1))
update!(a, b)
print(f(1))