есть иерархия классов Document -> Ivoice, Document -> Contract. Но получается так, что в каждом из дочерних классов переопределяется почти три четверти методов, оставляя только часть общих полей. По сути - класс Document оказывается в таком виде не нужен, поскольку он не в поной мере представляет абстракцию "всех документов". Нам тогда можно было бы выделить разные виды документов как родительские классы и от них наследовать более конкретные реализации.

Если применять подход из материалов с интерфейсами (в Питоне это несколько условно, мне кажется), то тут скорее можно применить концепцию абстрактных классов (Protocol в последних версиях, но то больше для тайпхинтов и тайпчекинга), где будут просто задекларированы какие-то методы с реализацией в классе-реализации

class DocumentSign(ABC):
    @abstractmethod
    def sign(self): ...


class DocumentApproval(ABC):
    @abstractmethod
    def approve(self): ...

    @abstractmethod
    def reject(self): ...


Декоратор @abstractmethod заставляет делать реализацию обязательных методов в наследниках.

Тогда можно применить множественное наследование и набрать нужные методы и реализовать их в условно родительских классах

class Invoice(DocumentSign, DocumentApproval): ...

class Contract(DocumentSign): ...  # у контракта нет необходимости во внутреннем согласовании, например.


Другой подход, возможно, это миксины, когда мы к любому классу подмешиваем нужные методы

class SignMixin:
    def sign(self):
        # может быть односторонним, тогда класс, куда мы его добавим, вернет одну сторону как None
        part1, part2 = self._get_parts()
        
        # пусть тогда основной класс знает о конкретной реализации подписания в программе через свой контроллер или сервис
        controller = self._get_controller()

        # а здесь дальше мы сможем взаимодействовать с системой учета подписей или их верификации, что будет общим для всех документов


и тогда

class Contract(SignMixin): ...

class Invoice(SignMixin): ...

class Memo(SignMixin): ...

и так набрать нужных миксинов в нужных классах.


PS Ясную Архитектуру я еще не проходил.