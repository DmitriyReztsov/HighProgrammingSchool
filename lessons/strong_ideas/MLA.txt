Проект А (Джанго, сервис управления документооборотом).

Архитектура задана архитектурой Джанго, много цикличных импортов, котороые разрешаются переносом импорта в вызывающую тот или иной модуль сущность (метод, функцию). Только в последнее время договорились о выделении бизнес-логики в отдельный сервисный слой, но это к порядку во всем проекте, понятно дело, не привело.

Проект Б (текущий, Торнадо, asyncio, сервис мессенджера для общения с оператором клиента).
Здесь архитекутра намного более формализована, строже.
Построена с учетом подходов DDD и отделения представления, контроллеров и логики домена друг от друга.
Получается, что пользовательский интерфейс - это отдельно разворачиваемый модуль.

Работа бэкенда - это 4 уровня: Entrypoints -> Domains -> Services -> Resources. Но фактически граф выглядит немного более разветвленным: Entrypoints могут обращаться к Services и Resources, Services -> Resources. Но вроде как (я только начал работу на проекте) тут стараются поддерживать правильную направленность зависимостей и направление выдерживается верное.

Entrypoints – обработка запросов к бэкенду.
Domains – реализация бизнес-логики и всего, что с ней связано
Services – логика по работе с инфраструктурой в общем виде:
    Сервис подключения к БД
    Межсервисные/межсерверные запросы
    Отправка почты
Resources – ресурсы и реализация программного доступа к ним:
    Словари переводов (i18n) 
    Конструктор URL
    Темплейты страниц и писем