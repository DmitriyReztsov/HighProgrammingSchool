Пусть у нас есть класс оператора некоторого сайта

class Operator:
    account = ...
    department = ...
    is_admin = ...

и в какой-то момент нам понадобилось учитывать количество одновременно открытых чатов этого оператора. Если у нас нет права менять существующий класс, то в этой ситуации возможно было бы создавать в памяти некий словарь с подобного рода счетчиком.

oper_counter = {
    oper1: {"counter": counter},
    oper2: {"counter": counter},
}

С точки зрения правила "Keep it simple" - это усложнение, поскольку обычно о схеме данных судят по описанию модели, из одного источника. Таким образом появляется неочевидные поля, которые могут стать источником ошибок.

Если подходить к вопросу с точки зрения использования данных, то если этот счетчик нужен только как относительная и динамическая величина - например, для выбора оператора, которому поручить очередного пользователя по его минимальной загруженности в моменте - то такая информация особо не нужна в БД и постоянные операции записи-чтения выглядят как излишняя нагрузка. Можно было бы хранить в памяти. Но даже в таком случае стоит как-то хотя бы комментарием обозначить это. Но для такого рода информации это - упрощение в плане техническом.

Если же подобная информация нужна на долгом отрезке, она должна сохраняться даже при перезагрузке сервера. Для подобного рода информации такое решение может потребовать своей модели или других решениий в виде каких-то ключ-значение БД или сторонних библиотек. Тогда это уже усложнение, которое опять же повышает риск ошибки.

Если говорить о таком решении с т.з. мутабельности / иммутабельности объекта, который выступает ключом, то в случае, когда объект иммутабелен и любое его изменение реализуется через создание нового объекта-копии, то такое решение - точка для ошибки, поскольку необходимо следить за актуальностью ключа (хеша объекта). И наоборот, если у нас объект изменяемый, у него есть свой идетификатор (хэш, айдишник) и он существует в системе в единственно числе, то такое решение может легко расширить модель данных.