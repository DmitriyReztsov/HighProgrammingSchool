Разминочное 1
1.1. У нас есть сообщения в чатах, которые должны как-то обрабатываться. И есть несколько источников этих сообщений: оператор, посетитель, пара видов ботов. Задача - написать переключение с оператора на оператора. Сама по себе функция переключения одинакова для всех (пока, на сейчас). Спецификации целиком на функцию у ботов и операторов будут отличаться:
- бот должен определелить отдел (один вид ботов), или отдел + оператора (другой вид) и потом переключить на отдел (где сообщение возьмет случайный оператор) либо на конкретного оператора в конкретном отделе.
- опреатор же может просто руками и глазами выбрать нужного ему оператора в нужном ему отделе и переключить на него

1.2. Нужно было сделать ряд документов с раными названиями, которые по тикетам были похоже: должны были храниться как шаблон и прикрепляться к основному договору. У них были различия в тексте, но сначала предполагалось, что в них не будет переменных. Поэтому реализация предполагалась одинаковая - текстовый или html шаблон, конвертор в пдф и ссылка на основной документ.
Забегая вперед - уточнились требования, появились переменные и форматирование и реализация разъехалась по разным документам.

1.3. При начале чата с оператором диалог должен распределиться на оператора по определенным правилам и с учетом определенных настроек (спец. 1). Если чат нераспределился, то он условно попадает в очередь, которая периодически пытается распределить нераспределенные чаты (спец. 2). Сейчас обе спецификации используют один блок кода, хотя одиночный чат возможно должен распределяться с какими-то своими особенностями, чем очередь.

Разминочное 2
Пересмотрел свое задание про полиморфность кода. Мне кажется, я скорее делал ан-боксинг :) т.е. цепочку if-else и разные настроечные флаги разрывал на отдельные сревисы. Но в целом есть такой соблазн запихнуть все в один метод с флагами.

Разминочное 3
Это для меня сейчас  больная тема. Проект, на ктором я оказался, перегружен полиморфностью, сигналами, паттернами, паралелльными фоновыми обработчиками. Очень сложно разбираться, читая по коду и не зная входящих данных, что происходит и метод какого класса должен быть вызван на той или иной строчке. Мало того, что надо заглядывать в другие файлы, так еще и без дебаггера в ран-тайме не обойтись. В идеале - надо меньше увлекаться паттернами, даже в ущерб объема кода. Пусть было бы больше кода, но было бы понятно и из нейминга, и из переходов по использованию функции, откуда и куда течет информация. Возможно, что некие диспетчеры вместо полиморфных объектов тоже помогли бы разбираться с кодом. И можно было бы развести потоки информации тех же ботов и живых операторов по разным ендпойнтам, хоть и выглядят потоки похожими. Но я вот делал тикет, где в метод на десяток if-else и несколлько сотен строчек надо было добавить еще одну проверку и усугубить количество строк для расширения функционала бота.