Применил atheris к проекту на Django.
Проект большой, проверил несколько функций и методов, валидирующих текстовые вводы (примерно по 20-30 строк кода с 
учетом импортируемых модулей) и дат из списков. 
Насколько я понял, именно этим фаззер и занимается - проверкой вводов случайных данных. Самая большая трудность - это заставить работать
фаззер в одном контейнере с проектом. Опять же, насколько удалось понять, с обычной джанговской командой manage.py test 
он не работает, флаги в команде игнорирует и команду test воспринимает как каталог.
Еще в начале я пытался понять и разобраться, как его встроить в существующие тесты, но потом понял, что это принципиально
отдельный вид тестирования.

Поэтому запускал его отдельным файлом через интерпретатор, где организовал загрузку приложений проекта и установку 
родительской директории для импортов вручную.

Далее приступил к проверкам. Странно, что фаззер много раз пытался передать в функции пустые строки, хотя и строки из 
невидимых символов тоже были. Тестируемые функции выдержали тестирование (полагаю, потому что использовали библиотечные
валидаторы), но функция, которая передавалась в фаззер, содержала логику проверки работы фаззера и потребовала правок.
Отчет как раз указывал на те значения, при проверке которых функция внутри фаззера ожидала иного результата от тестируемой функции. 

Другая проверка была основана на выборе из списка значений - тут все было ожидаемо. Похоже на случайный выбор, реализуемый 
любыми генерациями индексов в заданном диапазоне.

Еще проверил работу ендпойнта логина. Ожидаемо все случайные логины и пароли ендпойнт отверг.

Итого, ошибки были найдены там, где шаблоны вводимых данных допускали больше вольностей с данными, чем тестируемые функции.
Отчет содержал данные, на которых проверка падала.