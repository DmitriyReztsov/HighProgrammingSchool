по поводу денормализации данных:

есть у нас на проекте один миксин, добавляющий определенное поведение в модели.

class TrackingFieldsChangesGFKMixin(models.Model):
    fields_last_changes = GenericRelation(FieldsLastChanges)

Суть его в том, чтобы на каждое поле модели, куда он добавлен, создавать запись в отдельной таблице FieldsLastChanges с учетом того, когда и кем это поле было последний раз изменено.

Так вот, этот функционал, в принципе, мог бы быть заменен на JSONField, которое представляет из себя строку json, словарь. Этот тип поддерживается PostgreSQL и в принципе удовлетворил бы тем потребностям, которые нам нужны от подобного типа данных. Особенно с учетом того, что мы не используем отдельные записи этой модели FieldsLastChanges, а выдаем на фронт весь набор по всем полям.

Единственный момент, когда удобство записи в модель и в словарь могут быть сравнены - это запись времени изменения. Даже в этом случае, наверное, нет большой разницы между записью в словарь по ключу и записью в базу. Даже скорее запись в словарь была бы предпочтительнее - в базе надо еще выполнить запрос на поиск записи, которую надо создать или модифицировать. Плюс поддерживать уникальность записей - не может быть две записи для одной модели и одного поля.

Чтение же, как я сказал, отдельных записей не представляет собой проблему, поскольку возвращаем мы все записи, относящиеся к объекту "родительской" модели.
Даже опять же, поиск по базе (даже индексированный) - это дополнительные затраты времени, против словаря из одного поля одной записи.
В общем, когда мы обсуждали этот вариант с коллегами, они меня убедили только нормализацией данных. Они не читали материал из сильных идей. Я тогда тоже еще не прочитал его.