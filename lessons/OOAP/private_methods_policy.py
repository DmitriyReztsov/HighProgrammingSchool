# В Питоне все методы и аттрибуты класса доступны как в его потомках, так и клиентам класса.
# Сокрытие осуществляется через спецификацию (договоренности): перед приватными методами (private) нужно писать двойное
# нижнее подчеркивание (__private_method()) - вызов выозможет только внутри собственного класса,
# перед защищенными (protected) одно (_protected_method()) - вызов возможен из собственного касса и классов-потомков.
# Единственный механизм квази-сокрытия приватного метода состоит в том, что извне класса вызов приватного метода
# возможен через специальный синтаксис, состоящий из нижнего подчеркивания, имени класса, имени метода (с двойным
# подчеркиванием). Это справедливо как для классов-потомков, так и объектов.


# 1. метод публичен в родительском классе А и публичен в его потомке B;
class A:
    def public_method(self):
        print("Public method from A")


class B(A): ...


b_obj = B()
b_obj.public_method()
# >>> Public method from A

# 2. метод публичен в родительском классе А и скрыт в его потомке B;
# для класса-потомка это будет новый метод, не имеющий соответствующего метода (super().method()) в родительском классе.

# 3. метод скрыт в родительском классе А и публичен в его потомке B;
# то же самое, что и в п.2


# 4. метод скрыт в родительском классе А и скрыт в его потомке B.
class C:
    def _protected_method(self):
        print("Protected from C")

    def __private_method(self):
        print("Private from C")

    def private_method_call(self):
        self.__private_method()


class D(C):
    def private_method_call(self):
        print("From D")
        self._C__private_method()


d_obj = D()
d_obj._protected_method()
# >>> Protected from C

d_obj._C__private_method()
# >>> Private from C

d_obj.private_method_call()
# >>> From D
# >>> Private from C
