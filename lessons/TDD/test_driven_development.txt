Базовое определение TDD

Test Driven Development -- это техника разработки, созданная Кентом Беком в 2002-м году.

Сначала пишется тест, затем минимальный код для его успешного прохождения, и потом проводится рефакторинг, если это требуется.

Цикл "красный-зеленый-рефакторинг" -- основа метода. Тесты пишутся до создания кода, реализующего логику тестов, что обычно новичками воспринимается контринтуитивно. Однако подтверждено многократной практикой самых крупных проектов, что TDD подход помогает существенно лучше продумывать дизайн кода и получать мгновенную обратную связь.

Есть такой мем:)

TDD появился после того, как рынок Smalltalk умер, и все Smalltalkers перешли на Java. 

Красная фаза: пишем тест, определяющий желаемое поведение, который обязательно завершается неудачей, так как соответствующей логики ещё нету.

Зеленая фаза: пишем минимальный код, с которым тест завершается успешно.

Мы должны написать минимальный код для прохождения текущего теста.

Однако разработчикам, не имеющим практики TDD, трудно это сделать, потому что они как бы должны знать, каким в конечном итоге должен быть код. Даже для опытных разработчиков это иногда может быть сложным.

Лучший способ получить качественные тесты - это мыслить в терминах спецификации поведения.

До того , как вы пишете код, вы пишете спецификации, которые задают (в форме тестов), что вам нужно, чтобы код делал. Затем вы реализуете указанное вами поведение. Таким образом, вам не нужно никого спрашивать, что тестировать: вам нужна некоторая функциональность.

"Почему я должен писать только минимальную функциональность для прохождения теста?"

Потому что вы не должны сразу фигачить потенциально неопределённое поведение.

Или может быть вы сразу точно указали всё требуемое поведение?

Мы специально используем термин "спецификация" перед термином "тест". Конечно, абсолютно допустимо тестировать только один случай или одну инструкцию. Но это немного противоречит требованию "Я написал спецификацию для одного сценария".

Спецификация подразумевает тщательность. И это именно то, чего мы хотим от наших тестов и в наших тестах.

Рефакторинг: улучшаем и оптимизируем структуру кода уже без изменения поведения, заданного тестом.

Как утверждает Дядюшка Боб в “Архитектура: Потерянные годы”, если вы хотите часто проводить небольшие рефакторинги, вам нужно быть абсолютно уверенным в том, что вы ничего не сломали. Но трудно быть достаточно дисциплинированным, чтобы написать полное тестовое покрытие после того, как ваш производственный код уже написан и запущен, и инструментами покрытия кода трудно правильно измерить, что охвачен каждый случай.

Если вместо этого вы "заранее" протестируете свой код, вы будете знать, что он полностью покрыт тестами, потому что вы не писали никакого рабочего кода, если у вас не было теста, побуждающего вас к этому. Таким образом вы можете уверенно вносить множество небольших изменений.

Каждая фаза цикла TDD должна быть короткой, обычно несколько минут.

Весь цикл повторяется для каждой новой требуемой функциональности.

TDD превращает написание тщательных тестов в увлекательное занятие: вы регулярно получаете небольшие и вполне заслуженные порции эндорфинов, поскольку каждые несколько минут добиваетесь небольших успехов в прохождении теста.

Впрочем, если вы решили, что точно знаете, что вам нужно создать, и не открыты для каких-либо обсуждений по этому поводу, то применение TDD - пустая трата времени :)

Написание тестов самоочевидно занимает больше времени: вы пишете тестовый код, на создание которого в противном случае вам не пришлось бы тратить время. В долгосрочной перспективе написание тестов всегда будет занимать заметно больше времени, чем их отсутствие.

Противоположная точка зрения заключается в том, что вы всегда тестируете свой код, и что если вы не тратите время на написание автоматических тестов, вы потратите столько же (а скорее всего существенно больше) времени на ручное тестирование, и ощутимо больше времени в долгосрочной перспективе.

По мнению некоторых гуру computer science, TDD занимает больше времени, чем создание кода без тестов, но не из–за написания самих тестов. Вместо этого, больше времени занимает рефакторинг. Просмотр кода, поиск дубликатов, подходящее ли сейчас время для создания абстракции -- всё это требует времени.

Поэтому самый полезный вопрос заключается не в том, стоят ли тесты дополнительного времени, а в том, стоит ли рефакторинг дополнительного времени.


Принципы написания тестов.

Важно давать тестам осмысленные названия.

Тесты должны быть ясными и легко  читаемыми, и чётко выражать ту фичу, которой тестируют.

Каждый тест проверяет одну конкретную вещь.

Тесты должны быть независимыми друг от друга.

В TDD используется структурный паттерн "Arrange-Act-Assert" (AAA) для организации модульных тестов, который разделяет тест на три чётких последовательных этапа:

1. Arrange (Подготовка): подготовка всех необходимых предварительных условий и входных данных для теста.

2. Act (Действие): выполнение непосредственно тестируемого действия/операции.

3. Assert (Проверка): проверка полученного результата на соответствие ожидаемому.

(Кто давно занимается на моих курсах, наверняка узнали в этом формальный подход триплов Хоара)


Стратегии реализации

Не пишите код, пока под соответствующую логику не будет написан тест, завершающийся неудачей.


Начинайте с простейшей реализации логики, которую задаёт тест, даже если она кажется "неправильной". Постепенно усложняйте код через рефакторинг.


Используйте триангуляцию -- написание нескольких тестов для выявления более общего поведения (покрытие разных сценариев или краевых случаев).  


Рефакторинг.

Рефакторинг делается только на зелёных тестах.

Важно вносить в код маленькие безопасные изменения.

Устраняйте дублирование кода.

Улучшайте названия переменных и структуру кода.

Применяйте паттерны проектирования при необходимости.


Шаблоны TDD

Изолированный тест: тестируемый код не зависит от внешних систем.


Конструктор тестовых данных (Test Data Builder): создание тестовых данных.

Тестовый дублёр (Test Double): замена реальных зависимостей (dummy, stub, mock, fake).... 


